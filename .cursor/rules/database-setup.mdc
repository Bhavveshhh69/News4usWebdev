---
alwaysApply: false
description: "Database setup and configuration for Supabase PostgreSQL"
globs: "*db*,*database*,*migration*,*schema*"
---

# Database Setup Guide

## üóÑÔ∏è Supabase PostgreSQL Configuration

NEWS4US uses Supabase PostgreSQL as the production database with enterprise-grade security and performance optimization.

## Database Architecture

### Connection Configuration
- **Host:** `aws-1-ap-south-1.pooler.supabase.com`
- **Port:** `5432`
- **SSL:** Required with self-signed certificate handling
- **Connection Pooling:** 4 different user roles for security

### Database Users & Roles
1. **Main User:** `postgres.hfymcyzedgdapbtwonwt` - Full database access
2. **App User:** `news_app_user` - Read/write application data
3. **Read-only User:** `news_read_user` - Read-only access
4. **Admin User:** `news_admin_user` - Administrative operations
5. **Audit User:** `news_audit_user` - Security audit logging

### Environment Configuration
```bash
# backend/.env
DB_HOST=aws-1-ap-south-1.pooler.supabase.com
DB_PORT=5432
DB_NAME=postgres
DB_USER=postgres.hfymcyzedgdapbtwonwt
DB_PASSWORD=Bhavv@1127
DB_SSL=true

# Role configurations
DB_APP_USER=news_app_user
DB_APP_USER_PASSWORD=strong_app_password_2025!@#
DB_READ_ONLY_USER=news_read_user
DB_READ_ONLY_USER_PASSWORD=strong_read_password_2025!@#
DB_ADMIN_USER=news_admin_user
DB_ADMIN_USER_PASSWORD=strong_admin_password_2025!@#
DB_AUDIT_USER=news_audit_user
DB_AUDIT_USER_PASSWORD=strong_audit_password_2025!@#
```

## Database Schema

### Tables Created (18 total)
1. **Core Tables:**
   - `users` - User accounts and authentication
   - `articles` - News articles and content
   - `categories` - Article categorization
   - `tags` - Article tagging system
   - `article_tags` - Many-to-many article-tag relationships

2. **Content Management:**
   - `media_assets` - File uploads and media management
   - `comments` - User comments on articles
   - `sessions` - Session management for authentication

3. **User Features:**
   - `user_profiles` - Extended user information
   - `user_preferences` - User settings and preferences
   - `user_favorites` - Bookmarked articles

4. **Analytics & Tracking:**
   - `article_views` - Article view tracking
   - `user_activity` - User behavior analytics

5. **Admin & Notifications:**
   - `notifications` - User notification system

6. **YouTube Integration:**
   - `youtube_videos` - YouTube video metadata
   - `youtube_playlists` - Playlist information
   - `youtube_video_articles` - Article-video relationships

7. **Security & Audit:**
   - `app_audit_log` - Security audit trail

### Migration Files
Located in [backend/migrations/](mdc:backend/migrations/):
- `001-create-users-table.js` - User authentication
- `002-create-articles-table.js` - Articles, categories, tags
- `003-create-media-table.js` - Media assets
- `004-create-sessions-table.js` - Session management
- `005-create-comments-table.js` - Comments system
- `006-create-user-profiles-table.js` - User profiles
- `007-create-analytics-tables.js` - Analytics tracking
- `008-create-notifications-table.js` - Notifications
- `009-create-admin-indexes.js` - Performance indexes
- `010-create-audit-log-table.js` - Security audit
- `011-create-youtube-tables.js` - YouTube integration

## SSL Configuration

### Supabase SSL Setup
```javascript
// backend/config/database.js
ssl: dbConfig.ssl === 'true' || dbConfig.ssl === true ?
  { rejectUnauthorized: false } : // Accept self-signed certificates
  dbConfig.ssl === 'false' || dbConfig.ssl === false ? false :
  dbConfig.ssl,
```

### Connection Testing
```bash
# Test all database connections
cd backend && npm run test:db

# Expected output:
# App user database connection successful
# Read-only user database connection successful
# Admin user database connection successful
# Audit user database connection successful
```

## Migration Execution

### Running Migrations
```bash
# Execute all migrations in order
cd backend
node migrate-to-supabase.js

# Or run individual migrations
node migrations/001-create-users-table.js
node migrations/002-create-articles-table.js
# ... etc
```

### Migration Verification
```sql
-- Check all tables exist
SELECT tablename FROM pg_tables WHERE schemaname = 'public' ORDER BY tablename;

-- Verify table counts
SELECT
  'users' as table_name, COUNT(*) as count FROM users
UNION ALL
SELECT 'categories', COUNT(*) FROM categories
UNION ALL
SELECT 'articles', COUNT(*) FROM articles;
```

## Security Features

### Role-Based Access Control
- **App User:** Can read/write application data
- **Read-only User:** Can only read data (for public endpoints)
- **Admin User:** Full administrative access
- **Audit User:** Read-only with insert permissions for audit logs

### Connection Pooling
```javascript
// 4 separate connection pools for security
const appUserPool = new Pool({...})      // Application operations
const readOnlyUserPool = new Pool({...}) // Public read operations
const adminUserPool = new Pool({...})    // Administrative tasks
const auditUserPool = new Pool({...})    // Security auditing
```

### SSL Encryption
- All connections use SSL encryption
- Self-signed certificate acceptance configured
- Production requires HTTPS for cookie security

## Development Setup

### Local Development
```bash
# Install dependencies
cd backend && npm install

# Set up environment
cp .env.example .env  # Configure database credentials

# Run migrations
node migrations/run-migration.js

# Seed initial data
node seed-database.js

# Test connections
npm run test:db
```

### Production Deployment
```bash
# Database already configured in .env
# Migrations run during deployment
# SSL automatically enabled in production
```

## Troubleshooting

### Connection Issues
1. **SSL Certificate:** Verify `rejectUnauthorized: false` is set
2. **Port Conflicts:** Check if port 4002 is in use
   ```bash
   netstat -ano | findstr :4002
   taskkill /PID <PID> /F
   ```
3. **Credentials:** Ensure .env file has correct Supabase credentials

### Migration Issues
1. **Order Dependency:** Run migrations in numerical order
2. **Existing Data:** Migrations use `IF NOT EXISTS` for safety
3. **Permissions:** Ensure admin user has necessary privileges

### Performance Issues
1. **Connection Pooling:** Adjust pool sizes in config
2. **Indexes:** Admin indexes created for query performance
3. **Query Optimization:** Use appropriate user roles for operations